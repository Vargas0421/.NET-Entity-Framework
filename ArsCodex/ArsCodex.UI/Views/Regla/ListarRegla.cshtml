@model IEnumerable<ArsCodex.Abstracciones.ModelosParaUI.ReglaDto>
@{
    ViewBag.Title = "Lista de Reglas";
}
@Html.AntiForgeryToken()

<div class="container-fluid px-4 mt-4">
    <h2 class="mb-4">Reglas registradas</h2>

    <p>
        @Html.ActionLink("Registrar nueva regla", "RegistrarRegla", new { idTipoEntidad = ViewBag.IdTipoEntidad }, new { @class = "btn btn-primary" })
    </p>

    <div class="card shadow-lg">
        <div class="card-header bg-white">
            <i class="fas fa-gavel me-1"></i>
            Reglas
        </div>
        <div class="card-body table-responsive">
            <table id="TablaReglas" class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.First().Nombre)</th>
                        <th>@Html.DisplayNameFor(m => m.First().Descripcion)</th>
                        <th>@Html.DisplayNameFor(m => m.First().Valor)</th>
                        <th>@Html.DisplayNameFor(m => m.First().TipoDeAccion)</th>
                        <th>@Html.DisplayNameFor(m => m.First().FechaDeRegistro)</th>
                        <th>@Html.DisplayNameFor(m => m.First().Estado)</th>
                        <th class="text-center">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        var descripcion = item.Descripcion ?? "";
                        var descripcionCorta = descripcion.Length > 15 ? descripcion.Substring(0, 15) + "..." : descripcion;
                        <tr>
                            <td>@item.Nombre</td>
                            <td>@descripcionCorta</td>
                            <td>@item.Valor</td>
                            <td>@(item.TipoDeAccion == 1 ? "Min" : item.TipoDeAccion == 2 ? "Max" : "Desconocido")</td>
                            <td>@item.FechaDeRegistro.ToString("dd/MM/yyyy")</td>
                            <td class="js-estado">
                                <span class="badge @(item.Estado ? "bg-success" : "bg-danger")">
                                    @(item.Estado ? "Activo" : "Inactivo")
                                </span>
                            </td>
                            <td class="text-center">
                                @Html.ActionLink("Editar", "EditarRegla", new { id = item.IdRegla }, new { @class = "btn btn-sm btn-outline-primary me-1" })
                                <a href="#" class="btn btn-sm btn-outline-warning js-toggle" data-id="@item.IdRegla">
                                    @(item.Estado ? "Inactivar" : "Activar")
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/simple-datatables@7.1.2/dist/umd/simple-datatables.min.js"></script>
    <script src="~/Scripts/Regla/ListarRegla/ScriptListarRegla.js"></script>
    <script>
        window.addEventListener('DOMContentLoaded', () => {
            const tabla = document.getElementById('TablaReglas');
            if (tabla) {
                new simpleDatatables.DataTable(tabla);
            }
        });

        document.addEventListener("click", (e) => {
            var a = e.target.closest(".js-toggle");
            if (!a) return;
            e.preventDefault();

            var row = a.closest('tr');
            var id = a.dataset.id;
            var token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            var data = { id: id };
            if (token) data.__RequestVerificationToken = token;

            fetch('@Url.Action("ToggleEstado","Regla")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' },
                body: Object.keys(data).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(data[k])).join('&')
            })
            .then(r => r.json())
            .then(res => {
                if (!res.ok) {
                    alert(res.error || 'Error desconocido');
                    return;
                }
                // Actualiza badge y texto del botón
                var estadoCell = row.querySelector('.js-estado span');
                estadoCell.className = 'badge ' + (res.estado === 'Activo' ? 'bg-success' : 'bg-danger');
                estadoCell.textContent = res.estado;

                a.textContent = (res.estado === 'Activo') ? 'Inactivar' : 'Activar';
            })
            .catch(err => alert('Error: ' + err));
        });
    </script>
}
